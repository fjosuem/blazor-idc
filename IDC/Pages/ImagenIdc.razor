@page "/imagenIdc"
@inject HttpClient Http
@inject GlobalUtil globalUtil
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<Spinner />

<section class="row bg-light text-dark">
    <article class="col">
        <h1 itemprop="name" class="text-center tituloHdos">Imágenes</h1>
    </article>
</section>

<div class="d-flex justify-content-center">
    <PaginacionSecciones PageSize="PageSize" PageIndex="PageIndex" PageChanged="PageChanged" TotalPages="TotalPages" />
</div>

<section class="container bg-white pt-2">
    <section class="row row-cols-1 row-cols-md-4 g-4">

        @if (listaimagenIdc != null)
        {
            foreach (var seccion in listaimagenIdc)
            {
                <section class="col hvr-shrink justify-content-center d-flex">
                    <section class="card hvr-shrink cardTieneContenido">
                        <a title="Clic para descargar" download class="text-decoration-none" href="@($"{globalUtil.UrlIDCAnterior}/{seccion.Url}")">

                            <input type="hidden" id="id" name="id" value="seccion.GenerateSlug" />

                            <header>
                                @if (!string.IsNullOrWhiteSpace(seccion.Url))
                                {
                                    <img alt="@seccion.Nombre" style="max-width: 200px !important; margin: 0 auto;" src="@($"{globalUtil.UrlIDCAnterior}/{seccion.Url}")" class="card-img-top d-block">
                                }
                            </header>
                            <footer class="text-center d-grid">
                                <button class="btn btn-dark rounded-0">Descargar</button>
                            </footer>
                        </a>
                    </section>
                </section>
            }
        }
    </section>

</section>

<div class="d-flex mt-2 justify-content-center">
    <PaginacionSecciones PageSize="PageSize" PageIndex="PageIndex" PageChanged="PageChanged" TotalPages="TotalPages" />
</div>

@code {
    private ImagenIdcDTO[]? listaimagenIdc;
    private int TotalPages { get; set; }
    private int PageSize { get; set; } = 16;
    private int PageIndex { get; set; } = 1;
    public string? UrlImagenimagenIdc { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        listaimagenIdc = await Http.GetFromJsonAsync<ImagenIdcDTO[]>($"{globalUtil.UrlApi}/api/imagenIdc/pag/{PageIndex}/{PageSize}");
        if (listaimagenIdc != null)
        {
            TotalPages = listaimagenIdc[0].TotalPaginas;
            UrlImagenimagenIdc = $"{globalUtil.UrlIDCAnterior}/Images/imagenIdces.jpeg";
        }
    }

    public class ImagenIdcDTO
    {
        public int IdimagenIdc { get; set; }
        public int IdCongregacion { get; set; }
        public string? Nombre { get; set; }
        public string? Descripcion { get; set; }
        public string? Url { get; set; }
        public int TotalPaginas { get; set; }
        public string? UrlImagenImagenIdc { get; set; }
    }

    private async Task PageChanged(int page)
    {
        PageIndex = page;
        await LoadData();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(2000);
            await JSRuntime.InvokeVoidAsync("hideSpinnerOP");
        }
    }
}
