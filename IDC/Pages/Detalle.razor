@page "/{tipo}/{idParam}"
@using IDC.DTOs
@inject HttpClient Http
@inject GlobalUtil globalUtil
@inject Microsoft.JSInterop.IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<Spinner />

@if (detalle != null && detalle.Length > 0)
{
    <section class="row bg-light text-dark">
        <article class="col">
            <h1 itemprop="name" class="text-center tituloHdos">@detalle[0].Titulo</h1>
        </article>
    </section>

    <aside class="container bg-white pt-2">
        <section class="row">
            <section class="col-12">
                @foreach (var item in detalle)
                {
                    <section class="card mb-2">
                        <header>
                            @if (string.IsNullOrWhiteSpace(item.UrlVideoYoutube) && !string.IsNullOrEmpty(item.UrlImagen))
                            {
                                <a title="Ver imagen" href="@($"{globalUtil.UrlIDCAnterior}/{item.UrlImagen}")" target="_blank">
                                    <img alt="@item.Titulo" style="width: 50%; margin: 0 auto; display: block;" src="@($"{globalUtil.UrlIDCAnterior}/{item.UrlImagen}")" class="card-img-top imgMain">
                                </a>
                            }
                            @if (!string.IsNullOrEmpty(item.Nombre))
                            {
                                <h5 class="card-title text-center">@item.Nombre</h5>
                            }
                        </header>

                        @if (!string.IsNullOrWhiteSpace(item.UrlVideoYoutube))
                        {
                            <section class="col-12 mt-2 text-center">
                                <iframe style="max-width: 100%;" width="560" height="315" src="@item.UrlVideoYoutube" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                            </section>
                        }

                        <article class="card-body textoDetalle">
                            @{
                                string descripcionDecodificada = !string.IsNullOrEmpty(item.Descripcion) ? System.Net.WebUtility.UrlDecode(item.Descripcion) : "";
                            }
                            @((!string.IsNullOrEmpty(descripcionDecodificada)) ? (MarkupString)RemoveUnwantedCharacters(descripcionDecodificada) : null)
                        </article>
                    </section>
                }
            </section>
        </section>
    </aside>
}

@code {
    [Parameter]
    public string? tipo { get; set; }

    [Parameter]
    public string? idParam { get; set; }

    private dynamic[]? detalle;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        if (string.IsNullOrEmpty(idParam)) NavigationManager.NavigateTo($"/", false);

        var id = !string.IsNullOrEmpty(idParam) ? idParam.Split('-')[0] : string.Empty;
        var url = tipo switch
        {
            "quienessomos" => $"{globalUtil.UrlApi}/api/quienessomos/{id}",
            "doctrina" => $"{globalUtil.UrlApi}/api/doctrina/detalle/{id}",
            "lenin" => $"{globalUtil.UrlApi}/api/lenin/{id}",
            "griego" => $"{globalUtil.UrlApi}/api/griego/{id}",
            "devocional" => $"{globalUtil.UrlApi}/api/devocional/{id}",
            "corto" => $"{globalUtil.UrlApi}/api/corto/{id}",
            "melodias" => $"{globalUtil.UrlApi}/api/alabanza/{id}",
            "directorio" => $"{globalUtil.UrlApi}/api/directorio/{id}",
            _ => throw new ArgumentException("Tipo no válido.")
        };
        detalle = await Http.GetFromJsonAsync<DetalleItemDTO[]>(url);
    }

    private string? RemoveUnwantedCharacters(string? input)
    {
        if (string.IsNullOrEmpty(input))
            return input;

        return input.Replace("%u200B", "");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(2000);
            await JSRuntime.InvokeVoidAsync("hideSpinnerOP");
        }
    }
}
